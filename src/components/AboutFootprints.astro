<section class="footprints-section">
  <div class="map-container">
    <div id="amap-container"></div>
  </div>
</section>

<!-- [!FIX 2] 使用 :global() 修复 InfoWindow 样式 -->
<style>
  /* --- 基础样式 (不用动) --- */
  .footprints-section { margin: 1.5rem 0; }
  .map-container { position: relative; }
  #amap-container { width: 100%; height: 500px; border-radius: 8px; border: 1px solid #e9ecef; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05); }

  /* 
   * ✨✨✨ 关键改动在这里 ✨✨✨
   * 我们现在为 "custom-info-window" 这个新盒子设计样式 
   */
  :global(.custom-info-window) {
    position: relative; 
    width: 260px;
    padding: 1rem;
    background: #fff;
    border-radius: 12px;
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
    transform: translateY(-10px); 
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    animation: fadeIn .3s ease-out;
  }

  /* --- 用CSS画出指向标记点的小箭头 --- */
  :global(.custom-info-window::after) {
    content: '';
    position: absolute;
    bottom: -10px; 
    left: 50%;
    transform: translateX(-50%);
    width: 0;
    height: 0;
    border-style: solid;
    border-width: 10px 10px 0 10px;
    border-color: #fff transparent transparent transparent; 
  }

  /* --- 小箭头的阴影，让它更立体 --- */
  :global(.custom-info-window::before) {
    content: '';
    position: absolute;
    bottom: -11px;
    left: 50%;
    transform: translateX(-50%);
    z-index: -1;
    width: 0;
    height: 0;
    border-style: solid;
    border-width: 11px 11px 0 11px;
    border-color: rgba(0,0,0,0.08) transparent transparent transparent;
  }

  /* --- 我们自己设计的关闭按钮 "×" --- */
  :global(.custom-info-window-close) {
    position: absolute;
    top: 8px;
    right: 8px;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    line-height: 1;
    color: #999;
    cursor: pointer;
    border-radius: 50%;
    transition: background-color 0.2s, color 0.2s;
  }
  :global(.custom-info-window-close:hover) {
    background-color: #f1f3f5;
    color: #333;
  }

  /* --- 内部内容样式 (标题、文字等) --- */
  :global(.custom-info-window h3) { margin: 0 0 12px; font-size: 1.2rem; color: #333; display: flex; align-items: center; gap: 8px; }
  :global(.custom-info-window h3::before) { content: '📍'; font-size: 1.1rem; }
  :global(.custom-info-window p) { margin: 0 0 12px; font-size: .95rem; color: #555; line-height: 1.5; }
  :global(.custom-info-window a) { color: #007bff; text-decoration: none; font-weight: 500; }
  :global(.custom-info-window a:hover) { text-decoration: underline; }

  /* --- 其他全局样式 (不用动) --- */
  :global(.amap-logo), :global(.amap-copyright) { display: none !important; }
  @keyframes fadeIn { from { opacity: 0; transform: translateY(0); } to { opacity: 1; transform: translateY(-10px); } }
  @media (max-width: 768px) { :global(.custom-info-window) { width: calc(100vw - 40px); } }
</style>



<script>
// ===== 新增: 只有容器有了尺寸才允许初始化地图 =====
function waitForContainerReady(containerId) {
  return new Promise((resolve) => {
    const el = document.getElementById(containerId);
    if (!el) { resolve(null); return; }
    function check() {
      if (el.offsetWidth > 0 && el.offsetHeight > 0) {
        resolve(el);
      } else {
        requestAnimationFrame(check);
      }
    }
    check();
  });
}

class AboutFootprintsMap {
  constructor() {
    this.map = null;
    this.apiKey = '8f7866712e18166a21b2ea28647375b9';
    this.securityJsCode = 'aa0ffaabb4e81b648858e25bd93b4236';
    this.cities = null;
    this.infoWindow = null;
    this.AMap = null;
    this._destroyed = false;
  }
  destroy() {
    if (this.map) {
      this.map.destroy();
      this.map = null;
    }
    this.infoWindow = null;
    this.AMap = null;
    const exist = document.getElementById('amap-container');
    if (exist) exist.innerHTML = '';
    this._destroyed = true;
  }
  async init() {
    this._destroyed = false;
    // ===== 关键点：确保容器已经可见且有尺寸 =====
    await waitForContainerReady('amap-container');

    const mapContainer = document.getElementById('amap-container');
    if (!mapContainer) return;

    try {
      if (this.securityJsCode) window._AMapSecurityConfig = { securityJsCode: this.securityJsCode };
      this.AMap = await this.loadAPI();
    } catch (error) {
      console.error("CRITICAL_FAILURE: 高德地图核心JS加载失败", error);
      this.showError("地图核心API加载失败，请检查网络和API Key。");
      return;
    }
    if (this._destroyed) return;

    this.map = new this.AMap.Map(mapContainer, {
      zoom: 5,
      center: [104.0668, 30.5728],
      mapStyle: 'amap://styles/light',
      viewMode: '2D'
    });
    this.map.resize();

    await this.loadCities();
    if (this._destroyed) return;
    if (this.cities) {
      this.addMarkers(this.cities.visitedPlaces, '#dc3545');
      this.addMarkers(this.cities.plannedPlaces, '#66b3ff');
      this.addMarkers(this.cities.desiredPlaces, '#28a745');
      this.plotPlannedRoutes();
    }
  }
  async loadCities() {
    try {
      const response = await fetch('/data/cities.json');
      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
      this.cities = await response.json();
    } catch (error) {
      console.error("ERROR: 城市数据加载失败。", error);
      this.cities = null;
    }
  }
  addMarkers(placeList, color) {
    placeList.forEach(place => {
      const marker = new this.AMap.Marker({
        position: [place.lng, place.lat],
        title: place.name,
        content: `<div style="width: 14px; height: 14px; background: ${color}; border: 2px solid #fff; border-radius: 50%; box-shadow: 0 2px 6px rgba(0,0,0,0.4);"></div>`
      });
      marker.on('click', () => this.openInfoWindow(place));
      this.map.add(marker);
    });
  }
  openInfoWindow(place) {
    if (this.infoWindow) this.infoWindow.close();
    let photoHTML = '';
    if (place.photo) {
      const imageElement = `<div style="width: 100%; height: 146px; overflow: hidden; border-radius: 8px; border: 1px solid #e9ecef; margin-top: 8px; display: block;"><img src="${place.photo}" alt="${place.name}" style="width: 100%; height: 100%; object-fit: cover; display: block;" onerror="this.parentElement.style.display='none'" /></div>`;
      photoHTML = place.article ? `<a href="${place.article}" target="_blank" style="text-decoration: none;">${imageElement}</a>` : imageElement;
    }
    let articleHTML = (place.article && !place.photo) ? `<p><a href="${place.article}" target="_blank">阅读相关文章</a></p>` : '';
    const contentString = `
      <div class="custom-info-window">
        <span class="custom-info-window-close">&times;</span>
        <h3>${place.name}</h3>
        <p>${place.description}</p>
        ${photoHTML}
        ${articleHTML}
      </div>`;
    this.infoWindow = new this.AMap.InfoWindow({
      isCustom: true,
      content: contentString,
      anchor: 'bottom-center',
      offset: new this.AMap.Pixel(0, -10)
    });
    this.infoWindow.open(this.map, [place.lng, place.lat]);
    setTimeout(() => {
      const closeBtn = document.querySelector('.custom-info-window-close');
      if (closeBtn) {
        closeBtn.onclick = () => {
          if(this.infoWindow) this.infoWindow.close();
        };
      }
    }, 0);
  }
  plotPlannedRoutes() {
    const plannedRoutes = this.cities.plannedPlaces.filter(place => place.path && place.path.length > 0);
    plannedRoutes.forEach(route => {
      const path = route.path.map(point => [point.lng, point.lat]);
      new this.AMap.Polyline({
        path,
        strokeColor: "#66b3ff",
        strokeWeight: 4,
        strokeOpacity: 0.7,
        strokeStyle: "solid",
        map: this.map
      });
    });
  }
  async loadAPI() {
    return new Promise((resolve, reject) => {
      if (window.AMap) return resolve(window.AMap);
      const script = document.createElement('script');
      script.src = `https://webapi.amap.com/maps?v=2.0&key=${this.apiKey}&plugin=AMap.Polyline`;
      script.onload = () => resolve(window.AMap);
      script.onerror = reject;
      document.head.appendChild(script);
    });
  }
  showError(message) {
    const container = document.getElementById('amap-container');
    if(container) {
      container.innerHTML = `<div style="text-align: center; padding: 20px; color: #666;">${message}</div>`;
    }
  }
}
// ========= 全局唯一地图实例 =========
let aboutMapInstance = null;
document.addEventListener('astro:page-load', () => {
  const mapContainer = document.getElementById('amap-container');
  if (mapContainer) {
    if (aboutMapInstance && typeof aboutMapInstance.destroy === 'function') {
      aboutMapInstance.destroy();
      aboutMapInstance = null;
    }
    aboutMapInstance = new AboutFootprintsMap();
    aboutMapInstance.init();
  }
});
document.addEventListener('astro:page-unload', () => {
  if (aboutMapInstance && typeof aboutMapInstance.destroy === 'function') {
    aboutMapInstance.destroy();
    aboutMapInstance = null;
  }
});
</script>